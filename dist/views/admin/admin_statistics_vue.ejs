<!DOCTYPE html>
<html lang="de">

<head>
    <title>Admin Konsole</title>
    <%- include('../header_common') %>
        <script src="/js/mdb.js"></script>
</head>

<body>
    <%- include('admin_navbar') %>
        <br>

        <div id="app">
            <div class="container">
                <div class="card">
                    <div class="card-header">
                        Aktuelle Auslastung
                    </div>
                    <div class="card-body">
                        <span>Offene Bestellungen: </span>
                        <span v-if="openOrders">{{openOrders.length}}</span>
                        <span v-else>-</span>
                        <br>
                        <span>Belegung: </span>
                        <span v-if="activeSessions && allTables">{{activeSessions.length}}/{{allTables.length}}</span>
                        <span v-else>-/-</span>
                        <br>
                        <span>Abgeschlossene Bestellungen heute: </span>
                        <span v-if="closedOrders">{{closedOrders.length}}</span>
                        <span v-else>-/-</span>
                    </div>
                </div>
                <br>
                <div class="card">
                    <div class="card-header">
                        Auslastung Stationen
                    </div>
                    <div class="card-body" v-if="orderDates.length">
                        Datum:
                        <select class="form-control" v-model="selectedDayChart">
                            <option value=""></option>
                            <option v-for="d in orderDates" :value="d.day">
                                {{ parseDate(d.day) }}
                            </option>
                        </select>
                        <canvas id="lineChart"></canvas>
                    </div>
                    <div class="card-body" v-else>
                        <h5 class="text-center">Keine Daten</h5>
                    </div>
                </div>
                <br>
                <div class="card">
                    <div class="card-header">
                        Verkaufszahlen
                    </div>
                    <div class="card-body" v-if="orderDates.length">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Datum:</span>
                            </div>
                            <select class="form-select" v-model="selectedDaySold">
                                <option value=""></option>
                                <option v-for="d in orderDates" :value="d.day">
                                    {{ parseDate(d.day) }}
                                </option>
                            </select>
                        </div>
                        <br>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Station:</span>
                            </div>
                            <select class="form-select" v-model="selectedStationSold">
                                <option value=""></option>
                                <option v-for="s in stations" :value="s">
                                    {{ s.name }}
                                </option>
                            </select>
                        </div>
                        
                    </div>
                    <br v-if="orderDates.length">
                    <div class="card-body" v-else>
                        <h5 class="text-center">Keine Daten</h5>
                    </div>
                    
                    <div class="container" v-if="orderDates.length">
                        <table class="table" v-if="soldProducts != null">
                            <thead>
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">Verkauft</th>
                                </tr>
                            </thead>
                            <tbody>
                                <template v-for="[key, value] in soldProducts">
                                    <tr>
                                        <td>{{ key }}</td>
                                        <td>{{ value }}</td>
                                    </tr>
                                </template>
                            </tbody>
                        </table>
                        <span v-else>Keine Daten gefunden!</span>
                    </div>
                </div>
                
                <br>

            </div>

            <!-- Error Modal -->
            <%- include('../errorModal') %>
        </div>


</body>

<!-- Vue Js -->
<script type="module" type="text/javascript">
    import dm from "/vue/datamodel.js";
    import hlp from "/vue/helper.js";

    const { createApp } = Vue;

    let app = createApp({
        data: () => ({
            // Data
            orderDates: [],
            openOrders: [],
            activeSessions: [],
            allTables: [],
            stations: [],
            dailyOrders: "",
            // Chart
            selectedDayChart: "",
            chart: null,
            selectedStation: "",
            closedOrders: [],
            // Sold
            selectedDaySold: "",
            selectedStationSold: "",
            soldProducts: [],


        }),

        // Execute at page load
        mounted() {
            this.loadData();
        },

        // Update data on changes
        watch: {
            async selectedDayChart(n, o) {
                if (this.selectedDayChart) {
                    await this.createChart()
                } else {
                    this.chart.destroy()
                }
            },
            async selectedDaySold(n, o) {
                if (this.selectedDaySold && this.selectedStationSold) {
                    this.soldProducts = await this.loadSoldData()
                } else {
                    this.soldProducts = null;
                }
            },
            async selectedStationSold(n, o) {
                if (this.selectedStationSold && this.selectedDaySold) {
                    this.soldProducts = await this.loadSoldData()
                } else {
                    this.soldProducts = null;
                }
            },
        },

        // Helper functions
        methods: {
            parseTime(timestamp) {
                const d = new Date(timestamp);
                return d.getHours() + ":" + d.getMinutes();
            },

            parseDate(timestamp) {
                const d = new Date(timestamp);
                return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
            },

            parseCartData(data) {
                var t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                for (const d of data) {
                    let h = (new Date(d.currentState.created)).getHours();
                    t[h] = t[h] + 1;
                }
                return t;
            },

            async loadData() {
                this.orderDates = await hlp.loadOrderDates();
                this.openOrders = await hlp.loadOpenOrders();
                this.activeSessions = await hlp.loadActiveSessions();
                this.allTables = await dm.loadTables();
                this.stations = await dm.loadStations();
                this.closedOrders = await hlp.loadDailyOrdersFromStation((new Date).toISOString(), -1)
            },

            async createChart() {
                // Datasets for the chart
                var pdatasets = [];
                // Generate colors for each station
                var globalcolors = []; // Prevent the same color twice
                // Load for each station the data
                for (let s of this.stations) {
                    // Generate individual color
                    var max_loops = 10;
                    var color;
                    do {
                        max_loops--;
                        color = hlp.getRandColor();
                        if (!globalcolors.includes(color)) {
                            globalcolors.push(color);
                            break;
                        }
                    } while (max_loops);
                    // Add to dataset
                    pdatasets.push({
                        label: s.name,
                        data: this.parseCartData(await hlp.loadDailyOrdersFromStation(this.selectedDayChart, s.id)),
                        borderColor: [
                            color,
                        ],
                    });
                }

                // Clear old chart
                if (this.chart != null) {
                    this.chart.destroy();
                }
                // Create Chart
                var ctxL = document.getElementById("lineChart").getContext('2d');
                this.chart = new Chart(ctxL, {
                    type: 'line',
                    data: {
                        labels: Array.from({
                            length: 24
                        }, (x, i) => i),
                        datasets: pdatasets
                    },
                    options: {
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true,
                                    min: 0,
                                    stepSize: 5
                                }
                            }]
                        }
                    }
                });
            },

            async loadSoldData() {
                let raw = await hlp.loadDailyOrdersFromStation(this.selectedDaySold, this.selectedStationSold.id);
                // Group by product
                let ordered = new Map();
                for (const r of raw) {
                    let found = ordered.get(r.product.name);
                    if (found) {
                        ordered.set(r.product.name, found + 1);
                    } else {
                        ordered.set(r.product.name, 1);
                    }
                }
                return ordered;
            }


        }



    });

    app.config.errorHandler = (err, instance, info) => {
        console.log("Error",err, info)
        hlp.makeError("The application has generated an error.", info, err);
    }
    app.mount("#app");



</script>

</html>