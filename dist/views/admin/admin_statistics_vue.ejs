<!-- Copyright Michael Selinger 2023 -->
<!DOCTYPE html>
<html lang="de">

<head>
    <title>Admin Konsole</title>
    <%- include('../header_common') %>
    <script src="/js/mdb.js"></script>
</head>

<body>
    <%- include('admin_navbar') %>
    <br>

    <div id="app">
        <div class="container">
            <div class="card">
                <div class="card-header">
                    Auslastung Stationen
                </div>
                <div class="card-body" v-if="orderDates.length">
                    Datum:
                    <select class="form-control" v-model="selectedDayChart">
                        <option value="" disabled></option>
                        <option v-for="d in orderDates" :value="d.day">
                            {{ parseDate(d.day) }}
                        </option>
                    </select>
                    <canvas v-if="selectedDayChart" id="lineChart"></canvas>
                </div>
                <div class="card-body" v-else>
                    <h5 class="text-center">Keine Daten</h5>
                </div>
            </div>
            <br>
            <div class="card">
                <div class="card-header">
                    Verkaufszahlen
                </div>
                <div class="card-body" v-if="orderDates.length">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Datum:</span>
                        </div>
                        <select class="form-select" v-model="selectedDaySold">
                            <option value="" disabled></option>
                            <option v-for="d in orderDates" :value="d.day">
                                {{ parseDate(d.day) }}
                            </option>
                        </select>
                    </div>
                    <br>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Station:</span>
                        </div>
                        <select class="form-select" v-model="selectedStationSold">
                            <option value="" disabled></option>
                            <option v-for="s in stations" :value="s">
                                {{ s.name }}
                            </option>
                        </select>
                    </div>

                </div>
                <div class="card-body" v-else>
                    <h5 class="text-center">Keine Daten</h5>
                </div>

                <div class="container" v-if="orderDates.length">
                    <table class="table table-hover" v-if="soldProducts != null && soldProducts.size">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Verkauft</th>
                                <th scope="col">Einzelpreis</th>
                                <th scope="col">Summe</th>
                            </tr>
                        </thead>
                        <tbody class="table-group-divider">
                            <template v-for="[key, value] in soldProducts">
                                <tr class="accordion-toggle collapsed" :id="'accordion_sold_'+key.id"
                                    data-bs-toggle="collapse" :data-bs-target="'#collapse_sold_'+key.id"
                                    :aria-controls="'collapse_sold_'+key.id">
                                    <td>{{ key.name}}</td>
                                    <template v-if="value instanceof Map"> 
                                        <td>{{ getNumOfMapEntries(value) }}</td>
                                        <td>-</td>
                                        <td>{{ getSumOfVariations(value) }} €</td>
                                    </template>
                                    <template v-else>
                                        <td>{{ value }}</td>
                                        <td>{{ key.price }} €</td>
                                        <td>{{ key.price * value }} €</td>
                                    </template>
                                </tr>
                                <tr v-if="value instanceof Map">
                                    <td colspan="4" class="p-0">
                                        <div :id="'collapse_sold_'+key.id" class="collapse in p-0">
                                            <template v-for="[v,num] in value">
                                                <ul class="row m-1">
                                                    <li class="col">{{v.attrname}}</li>
                                                    <div class="col">{{num}}</div>
                                                    <div class="col">{{v.price}} €</div>
                                                    <div class="col">{{num*v.price}} €</div>
                                                </ul>
                                            </template>
                                        </div>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                    <div v-if="soldProducts != null && soldProducts.size">
                        <h5 class="float-end text-decoration-underline pe-4">Gesamtsumme: {{getSumSoldOrders()}} €</h5>
                    </div>

                    <div class="card-body" v-else>
                        <h5 class="text-center">Keine Daten</h5>
                    </div>
                </div>

                
            </div>

            <br>

        </div>

        <!-- Error Modal -->
        <%- include('../errorModal') %>
    </div>


</body>

<!-- Vue Js -->
<script type="module" type="text/javascript">
    import dm from "/vue/datamodel.js";
    import hlp from "/vue/helper.js";

    const { createApp } = Vue;

    let app = createApp({
        data: () => ({
            // Data
            orderDates: [],
            stations: [],
            dailyOrders: "",
            // Chart
            selectedDayChart: "",
            chart: null,
            selectedStation: "",
            closedOrders: [],
            // Sold
            selectedDaySold: "",
            selectedStationSold: "",
            soldProducts: [],
        }),

        // Execute at page load
        mounted() {
            this.loadData();
        },

        // Update data on changes
        watch: {
            async selectedDayChart(n, o) {
                if (this.selectedDayChart) {
                    await this.createChart()
                } else {
                    this.chart.destroy()
                }
            },
            async selectedDaySold(n, o) {
                if (this.selectedDaySold && this.selectedStationSold) {
                    this.soldProducts = await this.loadSoldData()
                } else {
                    this.soldProducts = null;
                }
            },
            async selectedStationSold(n, o) {
                if (this.selectedStationSold && this.selectedDaySold) {
                    this.soldProducts = await this.loadSoldData()
                    console.log(this.soldProducts)
                } else {
                    this.soldProducts = null;
                }
            },
        },

        // Helper functions
        methods: {
            parseTime(timestamp) {
                const d = new Date(timestamp);
                return d.getHours() + ":" + d.getMinutes();
            },

            parseDate(timestamp) {
                const d = new Date(timestamp);
                return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
            },

            parseCartData(data) {
                if(!data){
                    return;
                }
                var t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                for (const d of data) {
                    let h = (new Date(d.currentState.created)).getHours();
                    t[h] = t[h] + 1;
                }
                return t;
            },

            getSumSoldOrders() {
                if (!this.soldProducts) {
                    return 0
                }
                let s = 0
                for (let [k, e] of this.soldProducts) {
                    if (e instanceof Map) {
                        for(let [variation,amount] of e) {
                            s+= variation.price * amount
                        }
                    } else {
                        s += k.price * e
                    }
                }
                return s.toFixed(2)
            },

            getSumOfVariations(map){
                let s = 0
                for(let [k,v] of map){
                    s+=k.price * v
                }
                return s.toFixed(2)
            },

            getNumOfMapEntries(map){
                let s =0;
                for(let [k,v] of map){
                    s+=v
                }
                return s;
            },

            async loadData() {
                this.orderDates = await hlp.loadOrderDates();
                this.openOrders = await hlp.loadOpenOrders();
                this.activeSessions = await hlp.loadActiveSessions();
                this.allTables = await dm.loadTables();
                this.stations = await dm.loadStations();
                this.closedOrders = await hlp.loadDailyOrdersFromStation((new Date).toISOString(), -1)
            },

            async createChart() {
                // Datasets for the chart
                var pdatasets = [];
                // Generate colors for each station
                var globalcolors = []; // Prevent the same color twice
                // Load for each station the data
                for (let s of this.stations) {
                    // Generate individual color
                    var max_loops = 10;
                    var color;
                    do {
                        max_loops--;
                        color = hlp.getRandColor();
                        if (!globalcolors.includes(color)) {
                            globalcolors.push(color);
                            break;
                        }
                    } while (max_loops);
                    // Add to dataset
                    pdatasets.push({
                        label: s.name,
                        data: this.parseCartData(await hlp.loadDailyOrdersFromStation(this.selectedDayChart, s.id)),
                        borderColor: [
                            color,
                        ],
                    });
                }

                // Clear old chart
                if (this.chart != null) {
                    this.chart.destroy();
                }
                // Create Chart
                var ctxL = document.getElementById("lineChart").getContext('2d');
                this.chart = new Chart(ctxL, {
                    type: 'line',
                    data: {
                        labels: Array.from({
                            length: 24
                        }, (x, i) => i),
                        datasets: pdatasets
                    },
                    options: {
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true,
                                    min: 0,
                                    stepSize: 5
                                }
                            }]
                        }
                    }
                });
            },

            async loadSoldData() {
                /*
                Creates a map with the following schema
                Map{
                    key: Product
                    value: Map{
                        key: variation
                        value: amount
                    } or
                    value: amount (if no variation)
                }
                */

                let raw = await hlp.loadDailyOrdersFromStation(this.selectedDaySold, this.selectedStationSold.id);
                let grouped = await hlp.groupOrders(raw);
                console.log(grouped);
                // Group to products with variations
                let pMap = new Map();
                for(let g of grouped){
                    // Check if in map
                    let found = false;
                    for(let p of pMap.keys()){
                        if(p.id == g[0].product.id){
                            // Already in map -> add to existing
                            let existing = pMap.get(p)
                            // Check if variations present
                            if(existing instanceof Map){
                                // Check if variation is in subset
                                let pvk_found=false;
                                for(let [pvk,v] of existing){
                                    // Increment amount in variation subset
                                    if(pvk.id == g[0].variation.id){
                                        existing.set(pvk,v+1)
                                        pvk_found=true;
                                        break;
                                    }
                                }
                                if(!found){
                                    // Add variation to subset
                                    existing.set(g[0].variation,g[1].length)
                                }
                            }else{
                                // No variations
                                pMap.set(g[0].product,existing+1)
                            }
                            found=true;
                            break;
                        }
                    }
                    if(!found){
                        // Insert to map
                        if(g[0].variation){
                            let varMap = new Map();
                            varMap.set(g[0].variation,g[1].length)
                            pMap.set(g[0].product, varMap)
                        }else{
                            // No variation only integer
                            pMap.set(g[0].product,g[1].length)
                        }
                        
                    }
                }
                console.log("New grouping")
                console.log(pMap)
                return pMap
            }


        }



    });

    app.config.errorHandler = (err, instance, info) => {
        console.log("Error", err, info)
        hlp.makeError("The application has generated an error.", info, err);
    }
    app.mount("#app");



</script>

</html>